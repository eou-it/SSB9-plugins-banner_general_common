/*********************************************************************************
 Copyright 2014 Ellucian Company L.P. and its affiliates.
 ********************************************************************************* */
package net.hedtech.banner.general.communication.field

import groovy.sql.Sql
import net.hedtech.banner.general.communication.folder.CommunicationFolder
import net.hedtech.banner.testing.BaseIntegrationTestCase
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.springframework.orm.hibernate3.HibernateOptimisticLockingFailureException

/**
 * Integration tests for CommunicationField entity
 */
class CommunicationFieldIntegrationTests extends BaseIntegrationTestCase {

    def CommunicationFolder folder
    def String validImmutableId


    @Before
    public void setUp() {
        formContext = ['GUAGMNU']
        super.setUp()
        folder = newValidForCreateFolder()
        folder.save( failOnError: true, flush: true )
        //Test if the generated entity now has an id assigned
        assertNotNull folder.id
        validImmutableId = UUID.randomUUID().toString()
    }


    @After
    public void tearDown() {
        super.tearDown()
    }


    @Test
    void testCreateCommunicationField() {
        def communicationField = newCommunicationField()
        communicationField.save( failOnError: true, flush: true )

        // Assert domain values
        assertNotNull communicationField?.id
        assertEquals "TTTTTTTTTT", communicationField.description
        assertEquals folder.name, communicationField.folder.name
        assertEquals "TTTTTTTT", communicationField.formatString
        assertEquals "TTTTTTTT", communicationField.groovyFormatter
        assertEquals validImmutableId, communicationField.immutableId
        assertEquals "TTTTTTTTTT", communicationField.name
        assertEquals "TTTTTTTTTT", communicationField.previewValue
        assertEquals true, communicationField.renderAsHtml
        assertEquals "TTTTTTTTTT", communicationField.ruleUri
        assertEquals CommunicationFieldStatus.DEVELOPMENT, communicationField.status
    }


    @Test
    void testUpdateCommunicationField() {
        def communicationField = newCommunicationField()
        communicationField = communicationField.save( failOnError: true, flush: true )

        // Assert domain values
        assertNotNull communicationField?.id
        def id = communicationField.id

        // Find the domain
        communicationField = CommunicationField.get( id )
        assertNotNull communicationField

        // Update domain values
        communicationField.groovyFormatter = "###"
        communicationField.save( failOnError: true, flush: true )

        // Find the updated domain
        communicationField = CommunicationField.get( id )

        // Assert updated domain values
        assertNotNull communicationField?.id
        assertEquals( "###", communicationField.groovyFormatter )
    }



    @Test
    void testDeleteCommunicationField() {
        def communicationField = newCommunicationField()
        communicationField = communicationField.save( failOnError: true, flush: true )

        // Assert domain values
        assertNotNull communicationField?.id
        def id = communicationField.id

        // Find the domain
        communicationField = communicationField.get( id )
        assertNotNull communicationField

        // Delete the domain
        communicationField.delete()

        // Attempt to find the deleted domain
        communicationField = CommunicationField.get( id )
        assertNull communicationField
    }


    @Test
    void testNullValidationFailure() {
        // Instantiate an empty domain
        def communicationField = new CommunicationField()

        // Assert for domain validation
        assertFalse "CommunicationField should have failed null value validation", communicationField.validate()

        // Test that these fields raise an error if left null
        assertErrorsFor communicationField, 'nullable',
                        [
                                'folder',
                                'renderAsHtml',
                                'name',
                        ]
        // Test that these fields do NOT raise an error if left null
        assertNoErrorsFor communicationField,
                          [
                                  'description',
                                  'formatString',
                                  'groovyFormatter',
                                  'previewValue',
                                  'ruleUri',
                                  'immutableId',
                                  'status'
                          ]
    }


    @Test
    void testMaxSizeValidationFailure() {
        def communicationField = newCommunicationField()

        // Set domain values to exceed maximum allowed length
        communicationField.description
        communicationField.immutableId = "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
        communicationField.name
        communicationField.previewValue
        communicationField.renderAsHtml = true
        communicationField.ruleUri

        // Assert for domain
        assertFalse "CommunicationField should have failed max size validation", communicationField.validate()

        // Assert for specific fields
        assertErrorsFor communicationField, 'maxSize',
                        [
                                'description',
                                'immutableId',
                                'name',
                                'previewValue',
                                'ruleUri',
                        ]
    }


    @Test
    void testOptimisticLock() {
        def communicationField = newCommunicationField()
        communicationField.save( failOnError: true, flush: true )
        assertNotNull communicationField?.id

        def sql
        try {
            sql = new Sql( sessionFactory.getCurrentSession().connection() )
            sql.executeUpdate( "UPDATE gcrcfld SET gcrcfld_version = 999 WHERE gcrcfld_surrogate_id = ?", [communicationField.id] )
        } finally {
            sql?.close()
        }

        // Update the entity
        communicationField.dataOrigin = "OPT_TEST"
        shouldFail( HibernateOptimisticLockingFailureException ) {
            communicationField.save( failOnError: true, flush: true )
        }
    }


    private def newCommunicationField() {
        def communicationField = new CommunicationField(
                // Required fields
                folder: folder,
                immutableId: validImmutableId,
                name: "TTTTTTTTTT",
                returnsArrayArguments: false,

                // Nullable fields
                description: "TTTTTTTTTT",
                formatString: "TTTTTTTT",
                groovyFormatter: "TTTTTTTT",
                previewValue: "TTTTTTTTTT",
                renderAsHtml: true,
                ruleUri: "TTTTTTTTTT",
                status: CommunicationFieldStatus.DEVELOPMENT,
                statmentType: CommunicationRuleStatementType.SQL_PREPARED_STATEMENT,
                ruleContent: "Select max(term_code) from stvterm"
        )

        return communicationField
    }


    private def newValidForCreateFolder() {
        def folder = new CommunicationFolder(
                description: "Test Folder",
                internal: false,
                name: "Folder Name"
        )
        return folder
    }

}
