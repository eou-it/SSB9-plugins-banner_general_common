/*********************************************************************************
 Copyright 2010-2013 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/
package net.hedtech.banner.general.overall

import net.hedtech.banner.general.GeneralCommonUtility
import org.junit.Before
import org.junit.Test
import org.junit.After

import grails.validation.ValidationException
import groovy.sql.Sql
import java.text.SimpleDateFormat
import net.hedtech.banner.general.system.EntriesForSql
import net.hedtech.banner.general.system.EntriesForSqlProcesss
import net.hedtech.banner.general.system.SqlProcessParameter
import net.hedtech.banner.testing.BaseIntegrationTestCase
import org.springframework.orm.hibernate5.HibernateOptimisticLockingFailureException

class SqlProcessIntegrationTests extends BaseIntegrationTestCase {

    //Test data for creating new domain instance
    //Valid test data (For success tests)
    def i_success_entriesForSqlProcess
    def i_success_entriesForSql

    def i_success_sequenceNumber = 1
    def i_success_activeIndicator = true
    def i_success_validatedIndicator = true
    def i_success_startDate = new Date()
    def i_success_selectFrom = "TTTTT"
    def i_success_selectValue = "TTTTT"
    def i_success_whereClause = "TTTTT"
    def i_success_endDate = new Date()
    def i_success_parsedSql = "TTTTT"
    def i_success_systemRequiredIndicator = true
    //Invalid test data (For failure tests)
    def i_failure_entriesForSqlProcess
    def i_failure_entriesForSql

    def i_failure_sequenceNumber = 1
    def i_failure_activeIndicator = true
    def i_failure_validatedIndicator = true
    def i_failure_startDate = new Date()
    def i_failure_selectFrom = "TTTTT"
    def i_failure_selectValue
    def i_failure_whereClause = "TTTTT"
    def i_failure_endDate = new Date()
    def i_failure_parsedSql = "TTTTT"
    def i_failure_systemRequiredIndicator = true

    //Test data for creating updating domain instance
    //Valid test data (For success tests)
    def u_success_entriesForSqlProcess
    def u_success_entriesForSql

    def u_success_sequenceNumber = 1
    def u_success_activeIndicator = true
    def u_success_validatedIndicator = true
    def u_success_startDate = new Date()
    def u_success_selectFrom = "TTTTTTTTTT"
    def u_success_selectValue = "TTTTTTTTTT"
    def u_success_whereClause = "TTTTTTTTTT"
    def u_success_endDate = new Date()
    def u_success_parsedSql = "TTTTTTTTTT"
    def u_success_systemRequiredIndicator = true
    //Valid test data (For failure tests)
    def u_failure_entriesForSqlProcess
    def u_failure_entriesForSql

    def u_failure_sequenceNumber = 1
    def u_failure_activeIndicator = true
    def u_failure_validatedIndicator = true
    def u_failure_startDate = new Date()
    def u_failure_selectFrom = "TTTTT"
    def u_failure_selectValue
    def u_failure_whereClause = "TTTTT"
    def u_failure_endDate = new Date()
    def u_failure_parsedSql = "TTTTT"
    def u_failure_systemRequiredIndicator = true


    @Before
    public void setUp() {
        formContext = ['GUAGMNU'] // Since we are not testing a controller, we need to explicitly set this
        super.setUp()
        initializeTestDataForReferences()
    }

    //This method is used to initialize test data for references.
    //A method is required to execute database calls as it requires a active transaction
    void initializeTestDataForReferences() {
        //Valid test data (For success tests)
        def entriesForSqlProcess = new EntriesForSqlProcesss(code: 'INTEGRATION_TEST', description: 'INTEGRATION_TEST', startDate: new Date(), endDate: new Date() + 1, systemRequiredIndicator: false)
        entriesForSqlProcess.save(failOnError: true, flush: true)

        def entriesForSql = new EntriesForSql(code: 'INTEGRATION_TEST', description: 'INTEGRATION_TEST', startDate: new Date(), endDate: new Date() + 1, systemRequiredIndicator: false)
        entriesForSql.save(failOnError: true, flush: true)

        i_success_entriesForSqlProcess = entriesForSqlProcess
        i_success_entriesForSql = entriesForSql

        //Invalid test data (For failure tests)
        i_failure_entriesForSqlProcess = new EntriesForSqlProcesss(code: 'NON_EXISTENT', description: 'NON_EXISTENT', startDate: new Date(), endDate: new Date() + 1)
        i_failure_entriesForSql = new EntriesForSql(code: 'NON_EXISTENT', description: 'NON_EXISTENT', startDate: new Date(), endDate: new Date() + 1)

        //Valid test data (For success tests)
        //        u_success_entriesForSqlProcesss = EntriesForSqlProcesss.findWhere()
        //        u_success_entriesForSql = EntriesForSql.findWhere()

        //Valid test data (For failure tests)
        //        u_failure_entriesForSqlProcesss = EntriesForSqlProcesss.findWhere()
        //        u_failure_entriesForSql = EntriesForSql.findWhere()

        //Test data for references for custom tests
    }


    @After
    public void tearDown() {
        super.tearDown()
    }


    @Test
    void testCreateValidSqlProcess() {
        def sqlProcess = newValidForCreateSqlProcess()
        sqlProcess.save(failOnError: true, flush: true)
        //Test if the generated entity now has an id assigned
        assertNotNull sqlProcess.id
    }


    @Test
    void testCreateInvalidSqlProcess() {
        def sqlProcess = newInvalidForCreateSqlProcess()
        shouldFail(ValidationException) {
            sqlProcess.save(failOnError: true, flush: true)
        }
    }


    @Test
    void testUpdateValidSqlProcess() {
        def sqlProcess = newValidForCreateSqlProcess()
        sqlProcess.save(failOnError: true, flush: true)
        assertNotNull sqlProcess.id
        assertEquals 0L, sqlProcess.version
        assertEquals i_success_sequenceNumber, sqlProcess.sequenceNumber
        assertEquals i_success_activeIndicator, sqlProcess.activeIndicator
        assertEquals i_success_validatedIndicator, sqlProcess.validatedIndicator
        assertEquals i_success_startDate, sqlProcess.startDate
        assertEquals i_success_selectFrom, sqlProcess.selectFrom
        assertEquals i_success_selectValue, sqlProcess.selectValue
        assertEquals i_success_whereClause, sqlProcess.whereClause
        assertEquals i_success_endDate, sqlProcess.endDate
        assertEquals i_success_parsedSql, sqlProcess.parsedSql
        assertEquals i_success_systemRequiredIndicator, sqlProcess.systemRequiredIndicator

        //Update the entity
        sqlProcess.activeIndicator = u_success_activeIndicator
        sqlProcess.validatedIndicator = u_success_validatedIndicator
        sqlProcess.startDate = u_success_startDate
        sqlProcess.selectFrom = u_success_selectFrom
        sqlProcess.selectValue = u_success_selectValue
        sqlProcess.whereClause = u_success_whereClause
        sqlProcess.endDate = u_success_endDate
        sqlProcess.parsedSql = u_success_parsedSql
        sqlProcess.systemRequiredIndicator = u_success_systemRequiredIndicator

        sqlProcess.save(failOnError: true, flush: true)
        //Assert for sucessful update
        sqlProcess = SqlProcess.get(sqlProcess.id)
        assertEquals 1L, sqlProcess?.version
        assertEquals u_success_activeIndicator, sqlProcess.activeIndicator
        assertEquals u_success_validatedIndicator, sqlProcess.validatedIndicator
        assertEquals u_success_startDate, sqlProcess.startDate
        assertEquals u_success_selectFrom, sqlProcess.selectFrom
        assertEquals u_success_selectValue, sqlProcess.selectValue
        assertEquals u_success_whereClause, sqlProcess.whereClause
        assertEquals u_success_endDate, sqlProcess.endDate
        assertEquals u_success_parsedSql, sqlProcess.parsedSql
        assertEquals u_success_systemRequiredIndicator, sqlProcess.systemRequiredIndicator
    }


    @Test
    void testUpdateInvalidSqlProcess() {
        def sqlProcess = newValidForCreateSqlProcess()
        sqlProcess.save(failOnError: true, flush: true)
        assertNotNull sqlProcess.id
        assertEquals 0L, sqlProcess.version
        assertEquals i_success_sequenceNumber, sqlProcess.sequenceNumber
        assertEquals i_success_activeIndicator, sqlProcess.activeIndicator
        assertEquals i_success_validatedIndicator, sqlProcess.validatedIndicator
        assertEquals i_success_startDate, sqlProcess.startDate
        assertEquals i_success_selectFrom, sqlProcess.selectFrom
        assertEquals i_success_selectValue, sqlProcess.selectValue
        assertEquals i_success_whereClause, sqlProcess.whereClause
        assertEquals i_success_endDate, sqlProcess.endDate
        assertEquals i_success_parsedSql, sqlProcess.parsedSql
        assertEquals i_success_systemRequiredIndicator, sqlProcess.systemRequiredIndicator

        //Update the entity with invalid values
        sqlProcess.activeIndicator = u_failure_activeIndicator
        sqlProcess.validatedIndicator = u_failure_validatedIndicator
        sqlProcess.startDate = u_failure_startDate
        sqlProcess.selectFrom = u_failure_selectFrom
        sqlProcess.selectValue = u_failure_selectValue
        sqlProcess.whereClause = u_failure_whereClause
        sqlProcess.endDate = u_failure_endDate
        sqlProcess.parsedSql = u_failure_parsedSql
        sqlProcess.systemRequiredIndicator = u_failure_systemRequiredIndicator

        shouldFail(ValidationException) {
            sqlProcess.save(failOnError: true, flush: true)
        }
    }


    @Test
    void testDates() {
        def time = new SimpleDateFormat('HHmmss')
        def hour = new SimpleDateFormat('HH')
        def date = new SimpleDateFormat('yyyy-M-d')
        def today = new Date()

        def sqlProcess = newValidForCreateSqlProcess()

        // TODO review the arbitrary use of "Date()" as a date value in the test below and choose better values

        sqlProcess.startDate = new Date()
        sqlProcess.endDate = new Date()

        sqlProcess.save(flush: true, failOnError: true)
        sqlProcess.refresh()
        assertNotNull "SqlProcess should have been saved", sqlProcess.id

        // test date values -
        assertEquals date.format(today), date.format(sqlProcess.lastModified)
        assertEquals hour.format(today), hour.format(sqlProcess.lastModified)

        assertEquals time.format(sqlProcess.startDate), "000000"
        assertEquals time.format(sqlProcess.endDate), "000000"

    }


    @Test
    void testOptimisticLock() {
        def sqlProcess = newValidForCreateSqlProcess()
        sqlProcess.save(failOnError: true, flush: true)

        def sql
        try {
            sql = new Sql(sessionFactory.getCurrentSession().connection())
            sql.executeUpdate("update GORRSQL set GORRSQL_VERSION = 999 where GORRSQL_SURROGATE_ID = ?", [sqlProcess.id])
        } finally {
            sql?.close() // note that the test will close the connection, since it's our current session's connection
        }
        //Try to update the entity
        //Update the entity
        sqlProcess.activeIndicator = u_success_activeIndicator
        sqlProcess.validatedIndicator = u_success_validatedIndicator
        sqlProcess.startDate = u_success_startDate
        sqlProcess.selectFrom = u_success_selectFrom
        sqlProcess.selectValue = u_success_selectValue
        sqlProcess.whereClause = u_success_whereClause
        sqlProcess.endDate = u_success_endDate
        sqlProcess.parsedSql = u_success_parsedSql
        sqlProcess.systemRequiredIndicator = u_success_systemRequiredIndicator
        shouldFail(HibernateOptimisticLockingFailureException) {
            sqlProcess.save(failOnError: true, flush: true)
        }
    }


    @Test
    void testDeleteSqlProcess() {
        def sqlProcess = newValidForCreateSqlProcess()
        sqlProcess.save(failOnError: true, flush: true)
        def id = sqlProcess.id
        assertNotNull id
        sqlProcess.delete()
        assertNull SqlProcess.get(id)
    }


    @Test
    void testValidation() {
        def sqlProcess = newInvalidForCreateSqlProcess()
        assertFalse "SqlProcess could not be validated as expected due to ${sqlProcess.errors}", sqlProcess.validate()
    }


    @Test
    void testNullValidationFailure() {
        def sqlProcess = new SqlProcess()
        assertFalse "SqlProcess should have failed validation", sqlProcess.validate()
        assertErrorsFor sqlProcess, 'nullable',
                [
                        'sequenceNumber',
                        'activeIndicator',
                        'validatedIndicator',
                        'startDate',
                        'selectFrom',
                        'systemRequiredIndicator',
                        'entriesForSqlProcess',
                        'entriesForSql'
                ]
        assertNoErrorsFor sqlProcess,
                [
                        'selectValue',
                        'whereClause',
                        'endDate',
                        'parsedSql'
                ]
    }


    @Test
    void testMaxSizeValidationFailures() {
        def sqlProcess = new SqlProcess(
                selectValue
                whereClause
                parsedSql
        assertFalse "SqlProcess should have failed validation", sqlProcess.validate()
        assertErrorsFor sqlProcess, 'maxSize', ['selectValue', 'whereClause', 'parsedSql']
    }


    @Test
	void testFetchActiveValidatedPriorityProcessSql() {
		// setup test data
        def entriesForSqlProcesss = new EntriesForSqlProcesss(code: 'INTEGRATION_TEST_PROCESS', description: 'INTEGRATION_TEST', startDate: new Date(), endDate: new Date() + 1, systemRequiredIndicator: false)
        entriesForSqlProcesss.save(failOnError: true, flush: true)
        def entriesForSql = new EntriesForSql(code: 'INTEGRATION_TEST_RULE', description: 'INTEGRATION_TEST', startDate: new Date(), endDate: new Date() + 1, systemRequiredIndicator: false)
        entriesForSql.save(failOnError: true, flush: true)
        def sqlProcessParameter = new SqlProcessParameter(code: 'INTEGRATION_TEST_PARAM', description: 'INTEGRATION_TEST_PARAM', dataType: 'N', startDate: new Date(), endDate: new Date() + 1)
        sqlProcessParameter.save(failOnError: true, flush: true)
		def sqlProcessParameterByProcess = new SqlProcessParameterByProcess(systemRequiredIndicator: true, entriesForSqlProcess: entriesForSqlProcesss.code, parameterForSqlProcess: sqlProcessParameter.code)
        sqlProcessParameterByProcess.save(failOnError: true, flush: true)

		// define a relatively simple sql statement
		def sqlStatement = "select sgbstdn_pidm, decode(sgbstdn_styp_code,'T','Y','N') from sgbstdn where sgbstdn_pidm in :INTEGRATION_TEST_PARAM"

		// validate the sql statement to ensure lists of parameters are acceptable for use with GORRSQL
		def sql = new Sql(sessionFactory.currentSession.connection())
		sql.executeUpdate(
"""declare
  lv_result varchar2(1);
  invalid_sql EXCEPTION;
  function f_validate_sql_rule(sqpr_code varchar2, sql_stmt IN varchar2)
    return varchar2 is
    lv_err_msg varchar2(4000);
  begin
    if (gokrsql.f_validate_sql_rule(sqpr_code, sql_stmt, lv_err_msg)) then
      return 'Y';
    else
      return 'N';
    end if;
  end;
begin
  lv_result := f_validate_sql_rule(?,?);
  if (lv_result = 'N') then
    raise invalid_sql;
  end if;
end;""", ['INTEGRATION_TEST_PROCESS', sqlStatement])

		// create the SQL statement
        def sqlProcess = new SqlProcess(
                sequenceNumber: 1,
                activeIndicator: true,
                validatedIndicator: true,
                startDate: new Date(),
                selectFrom: 'FROM',
                whereClause: sqlStatement,
                endDate: null,
                parsedSql: sqlStatement,
                systemRequiredIndicator: true,
                entriesForSqlProcess: entriesForSqlProcesss,
                entriesForSql: entriesForSql)
        sqlProcess.save(failOnError: true, flush: true)

		// test sql statement retrieval
		def sqlStatements = SqlProcess.fetchActiveValidatedPriorityProcessSql('INTEGRATION_TEST_RULE', 'INTEGRATION_TEST_PROCESS')
		assertNotNull sqlStatements

		// update SQL statement to be invalid and re-test retrieval
		sqlProcess.validatedIndicator = false
		sqlProcess.save(failOnError: true, flush: true)
		sqlStatements = SqlProcess.fetchActiveValidatedPriorityProcessSql('INTEGRATION_TEST_RULE', 'INTEGRATION_TEST_PROCESS')
		assertEquals 0, sqlStatements.size()
		sqlProcess.validatedIndicator = true

		// update SQL statement to be inactive and re-test retrieval
		sqlProcess.activeIndicator = false
		sqlProcess.save(failOnError: true, flush: true)
		sqlStatements = SqlProcess.fetchActiveValidatedPriorityProcessSql('INTEGRATION_TEST_RULE', 'INTEGRATION_TEST_PROCESS')
		assertEquals 0, sqlStatements.size()
		sqlProcess.activeIndicator = true

		// update SQL statement to have no parsed sql and re-test retrieval
		sqlProcess.parsedSql = null
		sqlProcess.save(failOnError: true, flush: true)
		sqlStatements = SqlProcess.fetchActiveValidatedPriorityProcessSql('INTEGRATION_TEST_RULE', 'INTEGRATION_TEST_PROCESS')
		assertNull sqlStatements
		sqlProcess.parsedSql = sqlStatement

		// update SQL statement where start date not yet met and re-test retrieval
		sqlProcess.startDate = GeneralCommonUtility.getSystemDate() + 1
		sqlProcess.endDate = GeneralCommonUtility.getSystemDate() + 7
		sqlProcess.save(failOnError: true, flush: true)
		sqlStatements = SqlProcess.fetchActiveValidatedPriorityProcessSql('INTEGRATION_TEST_RULE', 'INTEGRATION_TEST_PROCESS')
		assertEquals 0, sqlStatements.size()

		// update SQL statement where end date is passed and re-test retrieval
		sqlProcess.startDate = new Date() - 7
		sqlProcess.endDate = new Date() - 1
		sqlProcess.save(failOnError: true, flush: true)
		sqlStatements = SqlProcess.fetchActiveValidatedPriorityProcessSql('INTEGRATION_TEST_RULE', 'INTEGRATION_TEST_PROCESS')
		assertEquals 0, sqlStatements.size()

		// revert the original sql statement
		sqlProcess.startDate = new Date()
		sqlProcess.endDate = null
		sqlProcess.save(failOnError: true, flush: true)

		// add annother statement and re-test
        sqlProcess = new SqlProcess(
                sequenceNumber: 2,
                activeIndicator: true,
                validatedIndicator: true,
                startDate: new Date(),
                selectFrom: 'FROM',
                whereClause: sqlStatement,
                endDate: new Date(),
                parsedSql: sqlStatement,
                systemRequiredIndicator: true,
                entriesForSqlProcess: entriesForSqlProcesss,
                entriesForSql: entriesForSql)
        sqlProcess.save(failOnError: true, flush: true)
		sqlStatements = SqlProcess.fetchActiveValidatedPriorityProcessSql('INTEGRATION_TEST_RULE', 'INTEGRATION_TEST_PROCESS')
		assertNotNull sqlStatements
	}


    @Test
    void testFetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode() {
        // setup test data
        def entriesForSqlProcesss = new EntriesForSqlProcesss(code: 'INTEGRATION_TEST_PROCESS', description: 'INTEGRATION_TEST', startDate: GeneralCommonUtility.getSystemDate(), endDate: GeneralCommonUtility.getSystemDate() + 1, systemRequiredIndicator: false)
        entriesForSqlProcesss.save(failOnError: true, flush: true)
        def entriesForSql = new EntriesForSql(code: 'INTEGRATION_TEST_RULE', description: 'INTEGRATION_TEST', startDate: GeneralCommonUtility.getSystemDate(), endDate: GeneralCommonUtility.getSystemDate() + 1, systemRequiredIndicator: false)
        entriesForSql.save(failOnError: true, flush: true)
        def sqlProcessParameter = new SqlProcessParameter(code: 'INTEGRATION_TEST_PARAM', description: 'INTEGRATION_TEST_PARAM', dataType: 'N', startDate: GeneralCommonUtility.getSystemDate(), endDate: GeneralCommonUtility.getSystemDate() + 1)
        sqlProcessParameter.save(failOnError: true, flush: true)
        def sqlProcessParameterByProcess = new SqlProcessParameterByProcess(systemRequiredIndicator: true, entriesForSqlProcess: entriesForSqlProcesss.code, parameterForSqlProcess: sqlProcessParameter.code)
        sqlProcessParameterByProcess.save(failOnError: true, flush: true)

        // define a relatively simple sql statement
        def sqlStatement = "select sgbstdn_pidm, decode(sgbstdn_styp_code,'T','Y','N') from sgbstdn where sgbstdn_pidm in :INTEGRATION_TEST_PARAM"

        // validate the sql statement to ensure lists of parameters are acceptable for use with GORRSQL
        def sql = new Sql(sessionFactory.currentSession.connection())
        sql.executeUpdate(
"""declare
  lv_result varchar2(1);
  invalid_sql EXCEPTION;
  function f_validate_sql_rule(sqpr_code varchar2, sql_stmt IN varchar2)
    return varchar2 is
    lv_err_msg varchar2(4000);
  begin
    if (gokrsql.f_validate_sql_rule(sqpr_code, sql_stmt, lv_err_msg)) then
      return 'Y';
    else
      return 'N';
    end if;
  end;
begin
  lv_result := f_validate_sql_rule(?,?);
  if (lv_result = 'N') then
    raise invalid_sql;
  end if;
end;""", ['INTEGRATION_TEST_PROCESS', sqlStatement])

        // create the SQL statement
        def sqlProcess = new SqlProcess(
                sequenceNumber: 1,
                activeIndicator: true,
                validatedIndicator: true,
                startDate: GeneralCommonUtility.getSystemDate(),
                selectFrom: 'FROM',
                whereClause: sqlStatement,
                endDate: null,
                parsedSql: sqlStatement,
                systemRequiredIndicator: true,
                entriesForSqlProcess: entriesForSqlProcesss,
                entriesForSql: entriesForSql)
        sqlProcess.save(failOnError: true, flush: true)

        // test sql statement retrieval
        def sqlStatements = SqlProcess.fetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode('INTEGRATION_TEST_PROCESS', 'INTEGRATION_TEST_RULE')
        assertEquals 1, sqlStatements.size()

        // update SQL statement to be invalid and re-test retrieval
        sqlProcess.validatedIndicator = false
        sqlProcess.save(failOnError: true, flush: true)
        sqlStatements = SqlProcess.fetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode('INTEGRATION_TEST_PROCESS', 'INTEGRATION_TEST_RULE')
        assertEquals 0, sqlStatements.size()
        sqlProcess.validatedIndicator = true

        // update SQL statement to be inactive and re-test retrieval
        sqlProcess.activeIndicator = false
        sqlProcess.save(failOnError: true, flush: true)
        sqlStatements = SqlProcess.fetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode('INTEGRATION_TEST_PROCESS', 'INTEGRATION_TEST_RULE')
        assertEquals 0, sqlStatements.size()
        sqlProcess.activeIndicator = true

        // update SQL statement to have no parsed sql and re-test retrieval
        sqlProcess.parsedSql = null
        sqlProcess.save(failOnError: true, flush: true)
        sqlStatements = SqlProcess.fetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode('INTEGRATION_TEST_PROCESS', 'INTEGRATION_TEST_RULE')
        assertEquals 0, sqlStatements.size()
        sqlProcess.parsedSql = sqlStatement

        // update SQL statement where start date not yet met and re-test retrieval
        sqlProcess.startDate = GeneralCommonUtility.getSystemDate() + 1
        sqlProcess.endDate = GeneralCommonUtility.getSystemDate() + 7
        sqlProcess.save(failOnError: true, flush: true)
        sqlStatements = SqlProcess.fetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode('INTEGRATION_TEST_PROCESS', 'INTEGRATION_TEST_RULE')
        assertEquals 0, sqlStatements.size()

        // update SQL statement where end date is passed and re-test retrieval
        sqlProcess.startDate = GeneralCommonUtility.getSystemDate() - 7
        sqlProcess.endDate = GeneralCommonUtility.getSystemDate() - 1
        sqlProcess.save(failOnError: true, flush: true)
        sqlStatements = SqlProcess.fetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode('INTEGRATION_TEST_PROCESS', 'INTEGRATION_TEST_RULE')
        assertEquals 0, sqlStatements.size()

        // revert the original sql statement
        sqlProcess.startDate = GeneralCommonUtility.getSystemDate()
        sqlProcess.endDate = null
        sqlProcess.save(failOnError: true, flush: true)

        // add annother statement and re-test
        sqlProcess = new SqlProcess(
                sequenceNumber: 2,
                activeIndicator: true,
                validatedIndicator: true,
                startDate: GeneralCommonUtility.getSystemDate(),
                selectFrom: 'FROM',
                whereClause: sqlStatement,
                endDate: GeneralCommonUtility.getSystemDate(),
                parsedSql: sqlStatement,
                systemRequiredIndicator: true,
                entriesForSqlProcess: entriesForSqlProcesss,
                entriesForSql: entriesForSql)
        sqlProcess.save(failOnError: true, flush: true)
        sqlStatements = SqlProcess.fetchSqlForExecutionByEntriesForSqlProcesssCodeAndEntriesForSqlCode('INTEGRATION_TEST_PROCESS', 'INTEGRATION_TEST_RULE')
        assertEquals 2, sqlStatements.size()
    }


    private def newValidForCreateSqlProcess() {
        def sqlProcess = new SqlProcess(
                sequenceNumber: i_success_sequenceNumber,
                activeIndicator: i_success_activeIndicator,
                validatedIndicator: i_success_validatedIndicator,
                startDate: i_success_startDate,
                selectFrom: i_success_selectFrom,
                selectValue: i_success_selectValue,
                whereClause: i_success_whereClause,
                endDate: i_success_endDate,
                parsedSql: i_success_parsedSql,
                systemRequiredIndicator: i_success_systemRequiredIndicator,
                entriesForSqlProcess: i_success_entriesForSqlProcess,
                entriesForSql: i_success_entriesForSql,
        )
        return sqlProcess
    }


    private def newInvalidForCreateSqlProcess() {
        def sqlProcess = new SqlProcess(
                sequenceNumber: i_failure_sequenceNumber,
                activeIndicator: i_failure_activeIndicator,
                validatedIndicator: i_failure_validatedIndicator,
                startDate: i_failure_startDate,
                selectFrom: i_failure_selectFrom,
                selectValue: i_failure_selectValue,
                whereClause: i_failure_whereClause,
                endDate: i_failure_endDate,
                parsedSql: i_failure_parsedSql,
                systemRequiredIndicator: i_failure_systemRequiredIndicator,
                entriesForSqlProcess: i_failure_entriesForSqlProcess,
                entriesForSql: i_failure_entriesForSql,
        )
        return sqlProcess
    }

}
